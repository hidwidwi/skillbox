#Загрузите таблицу из файла advertising_1.csv и сохраните её в датафрейм adv1_df. Укажите в качестве индекса столбец Number. Выведите на экран первые десять строк.
import pandas as pd
adv1_df = pd.read_csv("advertising_1.csv", index_col = "Number")
adv1_df.head(11)

#Выведите размер датафрейма adv1_df.
adv1_df.shape

#Выведите cреднее ежедневное время нахождения в интернете пользователя под номером 8.
adv8_df = adv1_df.iloc[2]
adv8_df.loc["Daily Internet Usage"]

#Загрузите таблицу из файла advertising_2.csv и сохраните её в датафрейм adv2_df. Укажите в качестве индекса стоблец Number. Выведите на экран строки для пользователей с номерами с 533-го по 536-й.
adv2_df = pd.read_csv("advertising_2.csv", index_col = "Number")
adv2_df.loc[533 : 536]

#Выведите сводную таблицу описательных статистик для датафрейма adv2_df, вызвав необходимый метод на всём датафрейме.
Глядя на вывод, напишите, столбец с каким названием не содержит незаполненных значений.
Подсказка: В сводной таблице не содержится информации о количестве строк всего датафрейма, поэтому для сначала распечатайте общее количество строк датафрейма.
Рекомендация: Кроме изученного метода describe для описания датафрейма и получения информации о пропущенных значениях полезен метод info.
adv2_df.shape
import pandas as pd
adv2_df = pd.read_csv("advertising_2.csv", index_col = "Number")
adv2_df.info()
adv2_df.describe()

#Добавьте к датафрейму adv1_df в конец датафрейм adv2_df с помощью метода append.
Сохраните объединенный датафрейм в новой переменной adv12_df и распечатайте его.
adv12_df = adv1_df.append(adv2_df)
adv12_df

#Для объединённого датафрейма adv12_df распечатайте среднее время, проводимое пользователем на сайте компании.
adv12_2_df = adv12_df["Daily Time Spent on Site"]
print(adv12_2_df.mean())

#Из объединённого датафрейма adv12_df выберите и распечатайте строки только с теми пользователями, для которых неизвестно среднее ежедневное время, проводимое пользователем на сайте компании.
adv12_df[adv12_df["Daily Time Spent on Site"].isna()]

#Загрузите таблицу из файла advertising_3.csv и сохраните её в датафрейм adv3_df. Укажите в качестве индекса стоблец Number. Выведите на экран столбцы Ad Topic Line и Clicked on Ad.
adv3_df = pd.read_csv("advertising_3.csv", index_col = "Number")
adv3_df[["Ad Topic Line", "Clicked on Ad"]]

#Добавьте к датафрейму adv12_df в конец датафрейм adv3_df с помощью метода concat. Явно пропишите значение параметра axis.
adv123_df = pd.concat([adv12_df, adv3_df], axis = 0)
adv123_df

#Для объединённого датафрейма adv123_df выберите только те строки, в которых пользователи кликнули на рекламное сообщение. Сохраните полученный результат в датафрейм success_adv_df, распечатайте размер нового датафрейма.
success_adv_df = adv123_df[adv123_df["Clicked on Ad"] == 1]
success_adv_df.shape

#Загрузите таблицу с данными пользователей из файла users.csv и сохраните её в датафрейм users_df. Индекс не указывайте.
Распечатайте сам датафрейм и сводную таблицу со статистиками для него.
users_df = pd.read_csv("users.csv")
users_df

#Объединять датафреймы с помощью merge можно и по индексам, и по столбцам с разными названиями. Так как общие значения содержатся в столбце Number, но в датафрейме users_df данный столбец является обычным столбцом, а в success_adv_df является индексом, перед тем как объединять, переведите столбец Number в success_adv_df в обычный столбец.
Для этого перед объединением пропишите:
success_adv_df = success_adv_df.reset_index()
success_full_df = pd.merge(left = success_adv_df, right = users_df, how="inner")
success_full_df

#Для объединённого датафрейма с пользователями, которые кликнули на рекламное сообщение success_full_df, отобразите сводную таблицу со статистиками для строковых колонок (Ad Topic Line, City, Country).
success_full_df = pd.merge(left = success_adv_df, right = users_df, how="inner")
success_full_df[["Ad Topic Line", "City", "Country"]].describe

#Для объединённого датафрейма с пользователями, которые кликнули на рекламное сообщение success_full_df, выведите страну и количество вхождений этой страны в датафрейм.
success_full_df["Country"].value_counts()

#Для объединённого датафрейма с пользователями, которые кликнули на рекламное сообщение success_full_df, выведите строки с данными пользователей из страны, название которой встречается чаще остальных
success_full_df[success_full_df["Country"] == "Ethiopia"]

#Для объединённого датафрейма с пользователями, которые кликнули на рекламное сообщение success_full_df, выведите строки с данными пользователей из страны, название которой встречается чаще остальных, они проводят в интернете в среднем больше 120 минут и их возраст меньше 30 лет. Cохраните получившиеся строки в новый датафрейм filtered_df.
filtered_df = success_full_df[((success_full_df["Country"] == "Ethiopia") & (success_full_df["Daily Internet Usage"] > 120) & (success_full_df["Age"] < 30))]
filtered_df

#Для получившегося датафрейма filtered_df выведите строки с данными пользователей, для которых либо не указано среднее время, проведённое на сайте, либо указанное время больше 55 минут. Cохраните получившиеся строки в новый датафрейм filtered_df2.
filtered_df2 = filtered_df[((filtered_df["Daily Time Spent on Site"] == None) | (filtered_df["Daily Time Spent on Site"] > 55))]
filtered_df2

#Для датафрейма adv123_df выведите строки с данными, заголовок рекламного сообщения в которых включает слово model.
Для этого вам понадобится метод contains.
model_df = adv123_df[(adv123_df["Ad Topic Line"].str.contains("model"))]
model_df

#Для получившегося датафрейма model_df выведите строки с данными пользователей, которые проводят на сайте больше среднего времени по всем пользователям в данном датафрейме. Cохраните получившиеся строки в новый датафрейм model_popular_df.
model_popular_df = model_df[((model_df["Daily Time Spent on Site"] > 71.417273))]
model_popular_df

#Для объединённого датафрейма model_popular_df выведите строки с данными пользователей, номера которых равны 501, 712 и 823
model_popular_df.loc[501]
